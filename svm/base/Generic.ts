/** * Created by davidatborresen on 18.09.13. *////<reference path='../../definitions/underscore.d.ts' />///<reference path='../utils/helpers.ts' />///<reference path='../interfaces/Interfaces.ts' />module SVM.Generic {    export class List implements IList    {        public _elements:any[] = [];        constructor(elements = [])        {            _.map(elements, (value)=>            {                this.add(value);            });        }        /**         * @param value         * @returns {boolean}         */        public contains(value:any):boolean        {            return _.contains(this._elements, value);        }        /**         * @param key         * @param value         */        public add(value:any):void        {            this._elements.push(value);        }        /**         * @param key         */        public remove(value):void        {            this._elements = _.without(this._elements, value);        }        /**         * @returns {number}         */        public count():number        {            return _.size(this._elements);        }        public clear():void        {            this._elements = [];        }        /**         * @returns {string}         */        public toString():string        {            return '[object List]';        }    }    export class Dictionary implements ICollection    {        private _elements:Object = {};        private _length:number = 0;        /**         * @returns {*[]}         */        public values():any[]        {            return _.values(this._elements);        }        /**         * @returns {string[]}         */        public keys():string[]        {            return _.keys(this._elements);        }        /**         * @param collection         * @returns {boolean}         */        public equals(collection:ICollection):boolean        {            return _.isEqual(this, collection);        }        /**         * @returns {SVM.Generic.Dictionary}         */        public clone():Dictionary        {            return _.clone(this);        }        /**         * @returns {string}         */        public toString():string        {            return '[object Dictionary]';        }        /**         * @param list IList         */        public add(list:IList):void        {            this._elements[this._length] = list;            this._length++;        }        /**         * @param value         * @returns {T[]}         */        public get(value:any):any        {            return this._filterGet(value).first().value();        }        /**         * @param value         * @returns {boolean}         */        public contains(value:any):any        {           return this._filterGet(value).size().value() > 0;        }        /**         * @param value         * @returns {_Chain}         * @private         */        private _filterGet(value:any):_Chain        {            return _.chain(this._elements)                .reject((list:IList)=>                {                    return list.contains(value);                });        }    }    export class HashSet    {        private _elements:any[];        /**         * @param elements         */        constructor(elements:any[] = [])        {            this._elements = elements;        }        /**         * @param value         * @returns {boolean}         */        public contains(value:any):boolean        {            return [].indexOf.call(this._elements, value) > -1;        }        /**         * @param value         */        public add(value:any):void        {            if(!this.contains(value))            {                this._elements.push(value);            }        }        /**         * @param value         * @returns {*}         */        public get(value:any):any        {            var index;            if((index = [].indexOf.call(this._elements, value)) !== -1)            {                return this._elements[index];            }            return void(1);        }        public forEach(callback:Function):any        {            this._elements.forEach(callback);            return this;        }        /**         * @param value         */        public remove(value:any):void        {            var index;            if((index = [].indexOf.call(this._elements, value)) !== -1)            {                this._elements.splice(index,1);            }        }        /**         * @returns {*[]}         */        public values():any[]        {            return this._elements;        }        /**         * @returns {string}         */        public toString():string        {            return '[object HashSet]';        }    }    export class CachedHashSet extends HashSet    {        /**         * @returns {string}         */        public toString():string        {            return '[object CachedHashSet]';        }    }    export class Tuple    {        private _components:any[];        /**         * @param components         */        constructor(components:number[])        {            this._components = components;        }        /**         * @param args         * @returns {SVM.Generic.Tuple}         */        public static create(...args:any[]):any[]        {            return SVM.Util.arrayPopulate(args.length,()=>            {               return args.splice(0,1);            });        }        /**         * @returns {*[]}         */        public get():any[]        {            return this._components;        }        /**         * @returns {number}         */        public count():number        {            return this._components.length;        }    }}